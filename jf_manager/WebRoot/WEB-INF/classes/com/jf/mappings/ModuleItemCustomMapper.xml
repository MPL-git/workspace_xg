<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jf.dao.ModuleItemCustomMapper" >
  <resultMap id="BaseResultMap" type="com.jf.entity.ModuleItemCustom"  extends="com.jf.dao.ModuleItemMapper.BaseResultMap">
  	<result column="pic" property="pic" jdbcType="VARCHAR" />
  	<result column="product_name" property="productName" jdbcType="VARCHAR" />
  	<result column="product_code" property="productCode" jdbcType="VARCHAR" />
  	<result column="sale_price_min" property="salePriceMin" jdbcType="DECIMAL" />
  	<result column="sale_price_max" property="salePriceMax" jdbcType="DECIMAL" />
  	<result column="discount_max" property="discountMax" jdbcType="DECIMAL" />
    <result column="discount_min" property="discountMin" jdbcType="DECIMAL" />
    <result column="stock" property="stock" jdbcType="INTEGER" />
  </resultMap>
  
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, decorate_module_id, item_id, item_type, seq_no, create_by, create_date, update_by, 
    update_date, remarks, del_flag,
    (select a.pic from bu_product_pic a where a.product_id=t.item_id and t.item_type='1' and a.del_flag='0' and a.is_default=1) pic,
    (select p.name from bu_product p where p.id=t.item_id and t.item_type='1' and p.del_flag='0') product_name,
    (select p.code from bu_product p where p.id=t.item_id and t.item_type='1' and p.del_flag='0') product_code,
    (select min(a.sale_price) from bu_product_item a where a.product_id=t.item_id and t.item_type='1' and a.del_flag='0') sale_price_min,
    (select max(a.sale_price) from bu_product_item a where a.product_id=t.item_id and t.item_type='1' and a.del_flag='0') sale_price_max,
    (select ROUND(max(a.sale_price/a.tag_price)*10,1) from bu_product_item a where a.product_id=t.item_id and t.item_type='1' and a.del_flag='0') discount_max,
    (select ROUND(min(a.sale_price/a.tag_price)*10,1) from bu_product_item a where a.product_id=t.item_id and t.item_type='1' and a.del_flag='0') discount_min,
    (select IFNULL(SUM(bpi.stock-bpi.locked_amount),0) from bu_product_item bpi where bpi.del_flag='0' and bpi.product_id=t.item_id and t.item_type='1') stock
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jf.entity.ModuleItemExample">
  	select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bu_module_item t
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitSize}
    </if>
  </select>
  <select id="getIdsByModuleId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
  	select mi.item_id from bu_module_item mi where mi.del_flag='0' and mi.decorate_module_id = #{decorateModuleId} order by mi.seq_no asc 
  </select>
  <select id="getItemIdsByItemType" resultType="java.lang.Integer" parameterType="java.lang.Integer">
  	select mi.item_id from bu_module_item mi,bu_decorate_module dm,bu_decorate_area da where mi.del_flag='0' and mi.item_type = '1' and dm.del_flag='0' and da.del_flag='0' and mi.decorate_module_id = dm.id and dm.decorate_area_id = da.id and da.decorate_info_id=#{decorateInfoId}
  </select>
  <select id="getItemIdsByInfoId" parameterType="java.util.HashMap" resultType="java.lang.Integer">
  	SELECT mi.item_id FROM bu_decorate_area da,bu_decorate_module dm,bu_module_item mi where da.id=dm.decorate_area_id AND dm.id = mi.decorate_module_id 
  		AND da.decorate_info_id=#{decorateInfoId} AND mi.item_type='2'
  		<if test="decorateModuleId!=null">
  	 	AND dm.id!=#{decorateModuleId}
  		</if>
  	 	AND da.del_flag='0' AND dm.del_flag='0' and mi.del_flag='0'
  </select>
  <select id="getCountByProductId" resultType="java.lang.Integer" parameterType="java.util.HashMap">
  	select count(mi.id) from bu_module_item mi,bu_decorate_module dm,bu_decorate_area da where mi.del_flag='0' and mi.item_type = '1' and mi.item_id=#{productId} and dm.del_flag='0' and da.del_flag='0' and mi.decorate_module_id = dm.id and dm.decorate_area_id = da.id and da.decorate_info_id=#{decorateInfoId}
  </select>
</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jf.dao.SingleProductActivityCustomMapper" >
  <resultMap id="BaseResultMap" type="com.jf.entity.SingleProductActivityCustom" extends="com.jf.dao.SingleProductActivityMapper.BaseResultMap" >
    <result column="type_desc" property="typeDesc" jdbcType="VARCHAR" />
    <result column="product_pic" property="productPic" jdbcType="VARCHAR" />
    <result column="brand_name" property="brandName" jdbcType="VARCHAR" />
    <result column="art_no" property="artNo" jdbcType="VARCHAR" />
    <result column="shop_name" property="shopName" jdbcType="VARCHAR" />
    <result column="mcht_type" property="mchtType" jdbcType="VARCHAR" />
    <result column="is_manage_self" property="isManageSelf" jdbcType="VARCHAR" />
    <result column="product_name" property="productName" jdbcType="VARCHAR" />
    <result column="stock_sum" property="stockSum" jdbcType="INTEGER" />
    <result column="first_audit_name" property="firstAuditName" jdbcType="VARCHAR" />
    <result column="schedule_audit_name" property="scheduleAuditName" jdbcType="VARCHAR" />
    <result column="again_audit_name" property="againAuditName" jdbcType="VARCHAR" />
    <result column="quantity_sum" property="quantitySum" jdbcType="VARCHAR" />
    <result column="code" property="code" jdbcType="VARCHAR" />
    <result column="tagPriceMin" property="tagPriceMin" jdbcType="DECIMAL" />
    <result column="tagPriceMax" property="tagPriceMax" jdbcType="DECIMAL" />
    <result column="costPriceMin" property="costPriceMin" jdbcType="DECIMAL" />
    <result column="costPriceMax" property="costPriceMax" jdbcType="DECIMAL" />
    <result column="salePriceMin" property="salePriceMin" jdbcType="DECIMAL" />
    <result column="salePriceMax" property="salePriceMax" jdbcType="DECIMAL" />
    <result column="discount" property="discount" jdbcType="VARCHAR" />
    <result column="average_sale_price" property="averageSalePrice" jdbcType="VARCHAR" />
    <result column="cut_price_cnf_create_name" property="cutPriceCnfCreateName" jdbcType="VARCHAR" />
    <result column="super_cut_price_order_dtl_count" property="superCutPriceOrderDtlCount" jdbcType="INTEGER" />
    <result column="cj_cut_price_order_count" property="cjCutPriceOrderCount" jdbcType="INTEGER" />
    <result column="yq_cut_price_order_count" property="yqCutPriceOrderCount" jdbcType="INTEGER" />
    <result column="max_invite_times" property="maxInviteTimes" jdbcType="INTEGER" />
    <result column="fixed_amount" property="fixedAmount" jdbcType="INTEGER" />
    <result column="single_product_sum" property="singleProductSum" jdbcType="INTEGER" />
    <result column="single_product_count" property="singleProductCount" jdbcType="INTEGER" />
    <result column="active_time" property="activeTime" jdbcType="INTEGER" />
    <result column="total_quantity_sum" property="totalQuantitySum" jdbcType="INTEGER" />
    <result column="productlog_min_sale_price" property="productlogminsalePrice" jdbcType="DECIMAL" />
    <result column="total_pay_amount" property="totalPayAmount" jdbcType="DECIMAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
  	id, type, mcht_id, product_id, coupon_id, original_price, activity_price, seckill_type, 
    compare_price, expected_date, begin_time, end_time, audit_status, status, is_close, 
    first_audit_by, schedule_audit_by, again_audit_by, seq_no, unreality_num, tomorrow_increase_min, 
    tomorrow_increase_max, is_watermark, platform_preferential, seckill_time_id, create_by, 
    create_date, update_by, update_date, remarks, del_flag,
    FUN_GET_STATUS_DESC("BU_SINGLE_PRODUCT_ACTIVITY","TYPE", t.type) type_desc,
    (select bp.pic from bu_product_pic bp where t.product_id = bp.product_id and bp.is_default = '1' and bp.del_flag='0' limit 1 ) product_pic,
    (select bb.name from bu_product_brand bb, bu_product bp where bb.del_flag = '0' and bp.del_flag = '0' and bb.id = bp.brand_id and bp.id = t.product_id limit 1 ) brand_name,
    (select bp.art_no from bu_product bp where t.product_id = bp.id and bp.del_flag = '0' limit 1 ) art_no,
    (select bm.shop_name from bu_mcht_info bm where t.mcht_id = bm.id and bm.del_flag = '0' limit 1 ) shop_name,
    (select bm.mcht_type from bu_mcht_info bm where t.mcht_id = bm.id and bm.del_flag = '0' limit 1 ) mcht_type,
    (select bp.name from bu_product bp where t.product_id = bp.id and bp.del_flag = '0' limit 1 ) product_name,
    (select IFNULL(SUM(bp.stock), 0) from bu_product_item bp where t.product_id = bp.product_id and bp.del_flag = '0') stock_sum,
    (select st.staff_name from sys_staff_info st where t.first_audit_by = st.staff_id limit 1 ) first_audit_name,
    (select st.staff_name from sys_staff_info st where t.schedule_audit_by = st.staff_id limit 1 ) schedule_audit_name,
    (select st.staff_name from sys_staff_info st where t.again_audit_by = st.staff_id limit 1 ) again_audit_name,
    <![CDATA[
    (select IFNULL(SUM(bd.quantity), 0) from bu_order_dtl bd, bu_sub_order so,bu_combine_order co where t.id = bd.single_product_activity_id and t.product_id = bd.product_id and bd.create_date>=t.begin_time and bd.create_date<=t.end_time and bd.is_give = '0' and bd.del_flag = '0'
    and bd.sub_order_id=so.id and so.combine_order_id=co.id and co.`status`='1' and (bd.product_status is null or bd.product_status = 1)) quantity_sum,
    ]]>
    (select bp.code from bu_product bp where t.product_id = bp.id and bp.del_flag = '0' limit 1 ) code,
    (select IFNULL(MIN(bpi.tag_price), 0) from bu_product_item bpi where t.product_id = bpi.product_id and bpi.del_flag = '0') tagPriceMin,
    (select IFNULL(MAX(bpi.tag_price), 0) from bu_product_item bpi where t.product_id = bpi.product_id and bpi.del_flag = '0') tagPriceMax,
    <![CDATA[
    	(select TRUNCATE(IFNULL(t.activity_price/MAX(bpi.tag_price), 0)*10, 1) from bu_product_item bpi where t.product_id = bpi.product_id and bpi.del_flag = '0') discount,
  	]]>
  	<![CDATA[
  		(select TRUNCATE(IFNULL((SUM(od.sale_price)-SUM(od.mcht_preferential)), 0)/COUNT(0), 2) from bu_order_dtl od where od.del_flag = '0' and od.product_id = t.product_id) average_sale_price,
  	]]>
  	(select st.staff_name from bu_cut_price_cnf cpc, sys_staff_info st where cpc.del_flag = '0' and cpc.single_product_activity_id = t.id and cpc.create_by = st.staff_id limit 1 ) cut_price_cnf_create_name,
  	(select count(1) from bu_cut_price_order cpo, bu_cut_price_order_dtl cpod where cpo.del_flag = '0' and cpod.del_flag = '0' and cpo.activity_type = '8' and cpo.id = cpod.cut_price_order_id and cpod.status = '1' and cpo.single_product_activity_id = t.id ) super_cut_price_order_dtl_count,
  	(select count(1) from bu_cut_price_order cpo where cpo.del_flag = '0' and cpo.activity_type = '8' and cpo.status = '4' and cpo.single_product_activity_id = t.id ) yq_cut_price_order_count,
  	(select count(1) from bu_cut_price_order cpo where cpo.del_flag = '0' and cpo.activity_type = '7' and cpo.status = '4' and cpo.single_product_activity_id = t.id ) cj_cut_price_order_count,
  	(select cpc.max_invite_times from bu_cut_price_cnf cpc where cpc.del_flag = '0' and cpc.single_product_activity_id = t.id ) max_invite_times,
  	(select cpcd.fixed_amount from bu_cut_price_cnf cpc, bu_cut_price_cnf_dtl cpcd where cpc.del_flag = '0' and cpcd.del_flag = '0' and cpc.single_product_activity_id = t.id and cpc.id = cpcd.cut_price_cnf_id and cpcd.rate_type = '4' limit 1 ) fixed_amount,
  	(select sum(bod.quantity) from bu_order_dtl bod where bod.del_flag = '0' and bod.single_product_activity_id = t.id ) single_product_sum,
  	(select count(1) from bu_order_dtl bod where bod.del_flag = '0' and bod.single_product_activity_id = t.id ) single_product_count,
  	(select cpc.active_time from bu_cut_price_cnf cpc where cpc.del_flag = '0' and cpc.single_product_activity_id = t.id ) active_time,
  	(select min(ppcl.min_sale_price) from bu_product_price_change_log ppcl, bu_product bp,bu_product p where ppcl.del_flag = '0' and p.del_flag='0' and bp.del_flag = '0' and ppcl.product_id = bp.id 
  		and ppcl.create_date between concat(DATE_SUB(CURDATE(), INTERVAL 90 DAY), ' 00:00:00') and concat(CURDATE(), ' 23:59:59')   
  		and ppcl.min_sale_price != t.activity_price and bp.mcht_id = p.mcht_id and bp.brand_id = p.brand_id and bp.art_no = p.art_no and t.product_id=p.id) productlog_min_sale_price <!--取同商家同品牌同货号商品中近三个月活动价格的最低值(不包含当前活动价格)-->
  </sql>
  <select id="selectByCustomExampl" resultMap="BaseResultMap" parameterType="com.jf.entity.SingleProductActivityCustomExample" >
    select
    <if test="distinct" >   
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bu_single_product_activity t
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitSize}
    </if>
  </select>
  <select id="countByCustomExample" parameterType="com.jf.entity.SingleProductActivityCustomExample" resultType="java.lang.Integer" >
    select count(*) from bu_single_product_activity t
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByCustomExampleSelective" parameterType="map" >
    update bu_single_product_activity t
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=CHAR},
      </if>
      <if test="record.mchtId != null" >
        mcht_id = #{record.mchtId,jdbcType=INTEGER},
      </if>
      <if test="record.productId != null" >
        product_id = #{record.productId,jdbcType=INTEGER},
      </if>
      <if test="record.originalPrice != null" >
        original_price = #{record.originalPrice,jdbcType=VARCHAR},
      </if>
      <if test="record.activityPrice != null" >
        activity_price = #{record.activityPrice,jdbcType=DECIMAL},
      </if>
      <if test="record.seckillType != null" >
        seckill_type = #{record.seckillType,jdbcType=CHAR},
      </if>
      <if test="record.comparePrice != null" >
        compare_price = #{record.comparePrice,jdbcType=DECIMAL},
      </if>
      <if test="record.expectedDate != null" >
        expected_date = #{record.expectedDate,jdbcType=DATE},
      </if>
      <if test="record.beginTime != null" >
        begin_time = #{record.beginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endTime != null" >
        end_time = #{record.endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.auditStatus != null" >
        audit_status = #{record.auditStatus,jdbcType=CHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=CHAR},
      </if>
      <if test="record.isClose != null" >
        is_close = #{record.isClose,jdbcType=CHAR},
      </if>
      <if test="record.firstAuditBy != null" >
        first_audit_by = #{record.firstAuditBy,jdbcType=INTEGER},
      </if>
      <if test="record.scheduleAuditBy != null" >
        schedule_audit_by = #{record.scheduleAuditBy,jdbcType=INTEGER},
      </if>
      <if test="record.againAuditBy != null" >
        again_audit_by = #{record.againAuditBy,jdbcType=INTEGER},
      </if>
      <if test="record.seqNo != null" >
        seq_no = #{record.seqNo,jdbcType=INTEGER},
      </if>
      <if test="record.unrealityNum != null" >
        unreality_num = #{record.unrealityNum,jdbcType=INTEGER},
      </if>
      <if test="record.tomorrowIncreaseMin != null" >
        tomorrow_increase_min = #{record.tomorrowIncreaseMin,jdbcType=INTEGER},
      </if>
      <if test="record.tomorrowIncreaseMax != null" >
        tomorrow_increase_max = #{record.tomorrowIncreaseMax,jdbcType=INTEGER},
      </if>
      <if test="record.createBy != null" >
        create_by = #{record.createBy,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null" >
        update_by = #{record.updateBy,jdbcType=INTEGER},
      </if>
      <if test="record.updateDate != null" >
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remarks != null" >
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.delFlag != null" >
        del_flag = #{record.delFlag,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
  
  <!-- 取同商家同品牌同货号商品中历史活动价格的最低值（不包含当前活动价格） -->
  <resultMap id="BaseResultMapTwo" type="com.jf.entity.SingleProductActivityCustom" extends="com.jf.dao.SingleProductActivityCustomMapper.BaseResultMap" >
    <result column="activity_price_min" property="activityPriceMin" jdbcType="DECIMAL" />
    <result column="mcht_grade_desc" property="mchtGradeDesc" jdbcType="VARCHAR" />
    <result column="product_log_min_sale_price" property="productLogMinSalePrice" jdbcType="DECIMAL" />
  	<result column="good_comment_rate" property="goodCommentRate" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List_Two" >
  	t.id, t.type, t.mcht_id, t.product_id, t.original_price, t.activity_price, t.seckill_type, t.compare_price, 
    t.expected_date, t.begin_time, t.end_time, t.audit_status, t.status, t.is_close, t.first_audit_by, 
    t.schedule_audit_by, t.again_audit_by, t.seq_no, t.unreality_num, t.tomorrow_increase_min, 
    t.tomorrow_increase_max, t.create_by, t.create_date, t.update_by, t.update_date, t.remarks, t.del_flag,
    FUN_GET_STATUS_DESC("BU_SINGLE_PRODUCT_ACTIVITY","TYPE", t.type) type_desc,
    (select bp.pic from bu_product_pic bp where t.product_id = bp.product_id and bp.is_default = '1' and bp.del_flag='0' limit 1 ) product_pic,
    (select bb.name from bu_product_brand bb, bu_product bp where bb.del_flag = '0' and bp.del_flag = '0' and bb.id = bp.brand_id and bp.id = t.product_id limit 1 ) brand_name,
    (select bp.art_no from bu_product bp where t.product_id = bp.id and bp.del_flag = '0' limit 1 ) art_no,
    (select bp.svip_discount from bu_product bp where t.product_id = bp.id and bp.del_flag = '0' limit 1 ) svipDiscount,
    (select bm.shop_name from bu_mcht_info bm where t.mcht_id = bm.id and bm.del_flag = '0' limit 1 ) shop_name,
    (select bm.mcht_type from bu_mcht_info bm where t.mcht_id = bm.id and bm.del_flag = '0' limit 1 ) mcht_type,
    (select bm.is_manage_self from bu_mcht_info bm where t.mcht_id = bm.id and bm.del_flag = '0' limit 1 ) is_manage_self,
    (select bp.name from bu_product bp where t.product_id = bp.id and bp.del_flag = '0' limit 1 ) product_name,
    (select IFNULL(SUM(bp.stock), 0) from bu_product_item bp where t.product_id = bp.product_id and bp.del_flag = '0') stock_sum,
    (select st.staff_name from sys_staff_info st where t.first_audit_by = st.staff_id limit 1 ) first_audit_name,
    (select st.staff_name from sys_staff_info st where t.schedule_audit_by = st.staff_id limit 1 ) schedule_audit_name,
    (select st.staff_name from sys_staff_info st where t.again_audit_by = st.staff_id limit 1 ) again_audit_name,
    <![CDATA[
    (select IFNULL(SUM(bd.quantity), 0) from bu_order_dtl bd, bu_sub_order so,bu_combine_order co where t.id = bd.single_product_activity_id and t.product_id = bd.product_id and bd.create_date>=t.begin_time and bd.create_date<=t.end_time and bd.is_give = '0' and bd.del_flag = '0'
    and bd.sub_order_id=so.id and so.combine_order_id=co.id and co.`status`='1' and (bd.product_status is null or bd.product_status = 1)) quantity_sum,
    ]]>
    (select IFNULL(SUM(bd.pay_amount), 0) from bu_order_dtl bd, bu_sub_order so,bu_combine_order co where t.id = bd.single_product_activity_id and t.product_id = bd.product_id and bd.del_flag = '0'
    and bd.sub_order_id=so.id and so.combine_order_id=co.id and co.`status`='1' and (bd.product_status is null or bd.product_status = 1) limit 1 ) total_pay_amount,
    (select bp.code from bu_product bp where t.product_id = bp.id and bp.del_flag = '0' limit 1 ) code,
    (select IFNULL(MIN(bpi.tag_price), 0) from bu_product_item bpi where t.product_id = bpi.product_id and bpi.del_flag = '0') tagPriceMin,
    (select IFNULL(MAX(bpi.tag_price), 0) from bu_product_item bpi where t.product_id = bpi.product_id and bpi.del_flag = '0') tagPriceMax,
    (select IFNULL(MIN(bpi.cost_price), 0) from bu_product_item bpi where t.product_id = bpi.product_id and bpi.del_flag = '0') costPriceMin,
    (select IFNULL(MAX(bpi.cost_price), 0) from bu_product_item bpi where t.product_id = bpi.product_id and bpi.del_flag = '0') costPriceMax,
    (select IFNULL(MIN(bpi.sale_price), 0) from bu_product_item bpi where t.product_id = bpi.product_id and bpi.del_flag = '0') salePriceMin,
    (select IFNULL(MAX(bpi.sale_price), 0) from bu_product_item bpi where t.product_id = bpi.product_id and bpi.del_flag = '0') salePriceMax,
    (select IFNULL(MAX(bpi.mall_price), 0) from bu_product_item bpi where t.product_id = bpi.product_id and bpi.del_flag = '0') mallPriceMax,
    (select IFNULL(MIN(bpi.mall_price), 0) from bu_product_item bpi where t.product_id = bpi.product_id and bpi.del_flag = '0') mallPriceMin,
    (select IFNULL(bmpb.pop_commission_rate, 0)  from bu_mcht_product_brand  bmpb , bu_product_brand  bpb  where bmpb.mcht_id = p.mcht_id and  bmpb.product_brand_id= p.brand_id  and bmpb.product_brand_id =bpb.id and bmpb.del_flag='0' and p.del_flag='0' AND bmpb.audit_status='3' AND bmpb.status='1' and bpb.status='1' and bpb.del_flag='0' ) popCommissionRate,
    <![CDATA[
    	(select TRUNCATE(IFNULL(t.activity_price/MAX(bpi.tag_price), 0)*10, 1) from bu_product_item bpi where t.product_id = bpi.product_id and bpi.del_flag = '0') discount,
  	]]>
  	<![CDATA[
  		(select TRUNCATE(IFNULL((SUM(od.sale_price)-SUM(od.mcht_preferential)), 0)/COUNT(0), 2) from bu_order_dtl od where od.del_flag = '0' and od.product_id = t.product_id) average_sale_price,
  	]]>
  	(select st.staff_name from bu_cut_price_cnf cpc, sys_staff_info st where cpc.del_flag = '0' and cpc.single_product_activity_id = t.id and cpc.create_by = st.staff_id limit 1 ) cut_price_cnf_create_name,
  	(select count(1) from bu_cut_price_order cpo, bu_cut_price_order_dtl cpod where cpo.del_flag = '0' and cpod.del_flag = '0' and cpo.activity_type = '8' and cpo.id = cpod.cut_price_order_id and cpod.status = '1' and cpo.single_product_activity_id = t.id ) super_cut_price_order_dtl_count,
  	(select count(1) from bu_cut_price_order cpo where cpo.del_flag = '0' and cpo.activity_type = '8' and cpo.status = '4' and cpo.single_product_activity_id = t.id ) yq_cut_price_order_count,
  	(select count(1) from bu_cut_price_order cpo where cpo.del_flag = '0' and cpo.activity_type = '7' and cpo.status = '4' and cpo.single_product_activity_id = t.id ) cj_cut_price_order_count,
  	(select min(spa.activity_price) from bu_single_product_activity spa, bu_product bp where spa.del_flag = '0' and bp.del_flag = '0' and spa.product_id = bp.id and spa.audit_status = '3' and spa.id != t.id and spa.mcht_id = t.mcht_id and bp.mcht_id = p.mcht_id and bp.brand_id = p.brand_id and bp.art_no = p.art_no ) activity_price_min,
  	FUN_GET_STATUS_DESC("BU_MCHT_INFO", "GRADE", (select mi.grade from bu_mcht_info mi where mi.del_flag = '0' and mi.id = t.mcht_id)) mcht_grade_desc,
  	(select min(ppcl.min_sale_price) from bu_product_price_change_log ppcl, bu_product bp where ppcl.del_flag = '0' and bp.del_flag = '0' and ppcl.product_id = bp.id 
  		and ppcl.create_date between concat(DATE_SUB(CURDATE(), INTERVAL 90 DAY), ' 00:00:00') and concat(CURDATE(), ' 23:59:59')   
  		and ppcl.min_sale_price != t.activity_price and bp.mcht_id = p.mcht_id and bp.brand_id = p.brand_id and bp.art_no = p.art_no ) product_log_min_sale_price,
  	<![CDATA[
    (select IFNULL(SUM(bd.quantity), 0) from bu_single_product_activity spa, bu_order_dtl bd, bu_sub_order so, bu_combine_order co where spa.product_id = t.product_id and spa.audit_status = '3' and spa.id = bd.single_product_activity_id and spa.product_id = bd.product_id and bd.create_date >= spa.begin_time and bd.create_date <= spa.end_time and bd.is_give = '0' and bd.del_flag = '0'
    and bd.sub_order_id = so.id and so.combine_order_id = co.id and co.`status` = '1' and (bd.product_status is null or bd.product_status = 1)) total_quantity_sum,
    ]]>
    CONCAT(IFNULL(ROUND((select count(1) from bu_comment c where c.del_flag = '0' and c.comment_source = '1' and c.product_score > 3 and c.is_append_comment = '0' and c.product_id = t.product_id)*100/(select count(1) from bu_comment c where c.del_flag = '0' and c.comment_source = '1' and c.is_append_comment = '0' and c.product_id = t.product_id), 2), '100.00'), '%') good_comment_rate
  </sql>
  <select id="selectBySingleProductActivityProductExampl" resultMap="BaseResultMapTwo" parameterType="com.jf.entity.SingleProductActivityCustomExample" >
    select
    <if test="distinct" >   
      distinct
    </if>
    <include refid="Base_Column_List_Two" />
      from bu_single_product_activity t, bu_product p
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitSize}
    </if>
  </select>
  <select id="countBySingleProductActivityProductExample" parameterType="com.jf.entity.SingleProductActivityCustomExample" resultType="java.lang.Integer" >
    select count(*) from bu_single_product_activity t, bu_product p
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
 
   	<select id="selectProductQuantitySumsByProductIds" parameterType="java.util.List"  resultMap="BaseResultMap"  >
	    SELECT
		id,
		product_id,
		begin_time,
		(
		SELECT
			IFNULL( SUM( bd.quantity ), 0 ) 
		FROM
			bu_order_dtl bd,
			bu_sub_order so,
			bu_combine_order co 
		WHERE
		<![CDATA[
			t.id = bd.single_product_activity_id 
			AND t.product_id = bd.product_id 
			AND bd.create_date >= t.begin_time 
			AND bd.create_date <= t.end_time 
			AND bd.is_give = '0' 
			AND bd.del_flag = '0' 
			AND bd.sub_order_id = so.id 
			AND so.combine_order_id = co.id 
			AND co.`status` = '1' 
			AND (bd.product_status is null or bd.product_status = 1) 
			 ]]> 
		) quantity_sum 
	FROM
		bu_single_product_activity t 
	WHERE
		( del_flag = 0 
		AND audit_status = 3 
		<![CDATA[
		AND (
		(begin_time BETWEEN DATE_ADD( NOW( ), INTERVAL -1 MONTH ) and NOW( ))
		or (end_time > DATE_ADD( NOW( ), INTERVAL -1 MONTH )) 
		)
		]]> 
		<if test="productIds!=null and productIds.size() > 0">
		AND product_id in 
			<foreach item="item" index="index" collection="productIds" open="(" separator="," close=")">
		    	#{item}
		    </foreach>
		</if>
		 ) 
	ORDER BY
		begin_time DESC 
  </select>

  <select id="countSingleProductActivityTrafficStatisticsRealTime" resultType="java.lang.Integer" parameterType="java.util.HashMap" >
    SELECT
      count(1)
    FROM
      bu_single_product_activity spa,
      bu_product p
    WHERE
      spa.del_flag = '0'
      AND p.del_flag = '0'
      AND spa.product_id = p.id
      AND spa.audit_status IN ( 1, 4, 3 )
      AND spa.is_close = '0'
      AND ( DATE_FORMAT( spa.end_time, '%Y-%m-%d %T' ) >= NOW( ) OR spa.end_time IS NULL )
      <if test="type != null" >
        AND spa.type = #{type,jdbcType=VARCHAR}
      </if>
      <if test="productId != null" >
        AND p.CODE = #{productId,jdbcType=INTEGER}
      </if>
      <if test="productName != null" >
        AND p.name LIKE #{productName,jdbcType=VARCHAR}
      </if>
      <if test="mchtCode != null" >
        AND EXISTS (select mi.id from bu_mcht_info mi WHERE mi.id = spa.mcht_id and mi.del_flag = '0' and mi.mcht_code = #{mchtCode,jdbcType=VARCHAR})
      </if>
      <if test="mchtName != null" >
        AND EXISTS (select mi.id from bu_mcht_info mi WHERE mi.id = spa.mcht_id and mi.del_flag = '0' and mi.shop_name LIKE #{mchtName,jdbcType=VARCHAR})
      </if>
      <if test="productTypeId != null" >
        AND p.product_type1_id = #{productTypeId,jdbcType=INTEGER}
      </if>
  </select>

  <select id="selectSingleProductActivityTrafficStatisticsRealTime" resultType="java.util.HashMap" parameterType="java.util.HashMap" >
    SELECT
      a.id AS id,
      a.seq_no AS seqNo,
      a.art_no AS artNo,
      a.productId AS productId,
      a.product_name AS productName,
      a.CODE AS CODE,
      a.product_pic AS productPic,
      a.brand_name AS brandName,
      a.shop_name AS shopName,
      a.mcht_grade_desc AS mchtGradeDesc,
      IFNULL( b.totalVisitorCount, 0 ) AS totalVisitorCount,
      0 AS totalVisitorCountTourist,
      IFNULL( b.totalPvCount, 0 ) AS totalPvCount,
      0 AS totalPvCountTourist,
      IFNULL( a.shoppingCartCount, 0 ) AS shoppingCartCount,
      IFNULL( a.subProductCount, 0 ) AS subProductCount,
      IFNULL( a.payProductCount, 0 ) AS payProductCount,
      IFNULL( CONCAT( ROUND( a.shoppingCartCount / b.totalVisitorCount * 100, 2 ), '%' ), '0.00%' ) AS addProductRate,
      IFNULL( CONCAT( ROUND( a.subProductCount / a.shoppingCartCount * 100, 2 ), '%' ), '0.00%' ) AS submitOrderRate,
      IFNULL( CONCAT( ROUND( a.payProductCount / a.subProductCount * 100, 2 ), '%' ) , '0.00%') AS paymentRate
    FROM
      (
      SELECT
      spa.id,
      spa.seq_no,
      p.id AS productId,
      p.art_no,
      p.NAME AS product_name,
      p.CODE,
      (
      SELECT
      bp.pic
      FROM
      bu_product_pic bp
      WHERE
      spa.product_id = bp.product_id
      AND bp.is_default = '1'
      AND bp.del_flag = '0'
      LIMIT 1
      ) product_pic,
      ( SELECT bb.NAME FROM bu_product_brand bb WHERE bb.del_flag = '0' AND bb.id = p.brand_id LIMIT 1 ) brand_name,
      ( SELECT bm.shop_name FROM bu_mcht_info bm WHERE spa.mcht_id = bm.id AND bm.del_flag = '0' LIMIT 1 ) shop_name,
      FUN_GET_STATUS_DESC (
      "BU_MCHT_INFO",
      "GRADE",
      ( SELECT mi.grade FROM bu_mcht_info mi WHERE mi.del_flag = '0' AND mi.id = spa.mcht_id )
      ) mcht_grade_desc,
      IFNULL(
      (
      SELECT
      SUM( bsc.quantity )
      FROM
      bu_shopping_cart bsc
      WHERE
      spa.id = bsc.single_product_activity_id
      AND bsc.create_date <![CDATA[ >= ]]> #{beginTime}
      AND bsc.create_date <![CDATA[ <= ]]> #{endTime}
      ),
      0
      ) AS shoppingCartCount,
      IFNULL(
      (
      SELECT
      COUNT( co.id )
      FROM
      bu_combine_order co,
      bu_sub_order so,
      bu_order_dtl od
      WHERE
      od.single_product_activity_id = spa.id
      AND od.sub_order_id = so.id
      AND so.combine_order_id = co.id
      AND co.create_date <![CDATA[ >= ]]> #{beginTime}
      AND co.create_date <![CDATA[ <= ]]> #{endTime}
      AND co.del_flag = '0'
      AND so.del_flag = '0'
      AND od.del_flag = '0'
      ),
      0
      ) AS subProductCount,
      IFNULL(
      (
      SELECT
      COUNT( co.id )
      FROM
      bu_combine_order co,
      bu_sub_order so,
      bu_order_dtl od
      WHERE
      od.single_product_activity_id = spa.id
      AND od.sub_order_id = so.id
      AND so.combine_order_id = co.id
      AND co.create_date <![CDATA[ >= ]]> #{beginTime}
      AND co.create_date <![CDATA[ <= ]]> #{endTime}
      AND co.STATUS = '1'
      AND co.pay_status = '1'
      AND co.del_flag = '0'
      AND so.del_flag = '0'
      AND od.del_flag = '0'
      ),
      0
      ) AS payProductCount
      FROM
      bu_single_product_activity spa,
      bu_product p
      WHERE
      spa.del_flag = '0'
      AND p.del_flag = '0'
      AND spa.product_id = p.id
      AND spa.audit_status IN ( 1, 4, 3 )
      AND spa.is_close = '0'
      AND ( DATE_FORMAT( spa.end_time, '%Y-%m-%d %T' ) >= NOW( ) OR spa.end_time IS NULL )
      <if test="type != null" >
        AND spa.type = #{type,jdbcType=VARCHAR}
      </if>
      <if test="productId != null" >
        AND p.CODE = #{productId,jdbcType=INTEGER}
      </if>
      <if test="productName != null" >
        AND p.name LIKE #{productName,jdbcType=VARCHAR}
      </if>
      <if test="mchtCode != null" >
        AND EXISTS (select mi.id from bu_mcht_info mi WHERE mi.id = spa.mcht_id and mi.del_flag = '0' and mi.mcht_code = #{mchtCode,jdbcType=VARCHAR})
      </if>
      <if test="mchtName != null" >
        AND EXISTS (select mi.id from bu_mcht_info mi WHERE mi.id = spa.mcht_id and mi.del_flag = '0' and mi.shop_name LIKE #{mchtName,jdbcType=VARCHAR})
      </if>
      <if test="productTypeId != null" >
        AND p.product_type1_id = #{productTypeId,jdbcType=INTEGER}
      </if>
      ORDER BY
      ifnull( spa.seq_no, 99999 ) ASC,
      spa.id DESC
      <if test="limitStart != null and limitSize != null " >
        LIMIT #{limitStart},#{limitSize}
      </if>
      ) a
    LEFT JOIN (
      SELECT
      mf.product_id AS productId,
      IFNULL( count( * ), 0 ) AS totalVisitorCount,
      IFNULL( count( DISTINCT ( mf.member_id ) ), 0 ) AS totalPvCount
      FROM
      bu_member_footprint mf,
      (
      SELECT
      spa.product_id
      FROM
      bu_single_product_activity spa
      WHERE
      spa.del_flag = '0'
      AND spa.audit_status IN ( 1, 4, 3 )
      AND spa.is_close = '0'
      AND ( DATE_FORMAT( spa.end_time, '%Y-%m-%d %T' ) >= NOW( ) OR spa.end_time IS NULL )
      <if test="type != null" >
        AND spa.type = #{type,jdbcType=VARCHAR}
      </if>
      <if test="productId != null" >
        AND p.CODE = #{productId,jdbcType=INTEGER}
      </if>
      <if test="productName != null" >
        AND p.name LIKE #{productName,jdbcType=VARCHAR}
      </if>
      <if test="mchtCode != null" >
        AND EXISTS (select mi.id from bu_mcht_info mi WHERE mi.id = spa.mcht_id and mi.del_flag = '0' and mi.mcht_code = #{mchtCode,jdbcType=VARCHAR})
      </if>
      <if test="mchtName != null" >
        AND EXISTS (select mi.id from bu_mcht_info mi WHERE mi.id = spa.mcht_id and mi.del_flag = '0' and mi.shop_name LIKE #{mchtName,jdbcType=VARCHAR})
      </if>
      <if test="productTypeId != null" >
        AND p.product_type1_id = #{productTypeId,jdbcType=INTEGER}
      </if>
      ORDER BY
      ifnull( spa.seq_no, 99999 ) ASC,
      spa.id DESC
      <if test="limitStart != null and limitSize != null " >
        LIMIT #{limitStart},#{limitSize}
      </if>
      ) c
    WHERE
      mf.del_flag = '0'
      AND c.product_id = mf.product_id
      AND mf.create_date <![CDATA[ >= ]]> #{beginTime}
      AND mf.create_date <![CDATA[ <= ]]> #{endTime}
    GROUP BY
      mf.product_id
    ) b ON b.productId = a.productId

  </select>
</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jf.dao.ActivityAreaCustomMapper" >
  <resultMap id="BaseResultMap" type="com.jf.entity.ActivityAreaCustom" extends="com.jf.dao.ActivityAreaMapper.BaseResultMap" >
  	<result column="create_staff_name" property="createStaffName" jdbcType="VARCHAR" />
  	<result column="source_desc" property="sourceDesc" jdbcType="VARCHAR" />
    <result column="type_desc" property="typeDesc" jdbcType="VARCHAR" />
    <result column="push_mcht_type_dese" property="pushMchtTypeDese" jdbcType="VARCHAR" />
    <result column="preferential_type_desc" property="preferentialTypeDesc" jdbcType="VARCHAR" />
    <result column="status_desc" property="statusDesc" jdbcType="VARCHAR" />
    <result column="activity_id" property="activityId" jdbcType="INTEGER" />
    <result column="short_name" property="shortName" jdbcType="VARCHAR" />
    <result column="mcht_code" property="mchtCode" jdbcType="VARCHAR" />
    <result column="brand_name" property="brandName" jdbcType="VARCHAR" />
    <result column="activity_days" property="activityDays" jdbcType="INTEGER"/>
    <result column="min_member_group_name" property="minMemberGroupName" jdbcType="VARCHAR" />
    <result column="adopt_mch_num" property="adoptMchNum" jdbcType="INTEGER" />
    <result column="sign_up_num" property="signUpNum" jdbcType="INTEGER" />
    <result column="adopt_activity_product_num" property="adoptActivityProductNum" jdbcType="INTEGER" />
    <result column="sign_activity_product_num" property="signActivityProductNum" jdbcType="INTEGER" />
    <result column="this_activity_area_num" property="thisActivityAreaNum" jdbcType="INTEGER" />
    <result column="this_activity_area_sale_price" property="thisActivityAreaSalePrice" jdbcType="DECIMAL"/>
    
    <result column="trial_operate_num" property="trialOperateNum" jdbcType="INTEGER" />
    <result column="pass_operate_num" property="passOperateNum" jdbcType="INTEGER" />
    <result column="trial_operate_audit_num" property="trialOperateAuditNum" jdbcType="INTEGER" />
    <result column="pass_operate_audit_num" property="passOperateAuditNum" jdbcType="INTEGER" />
    <result column="trial_coo_num" property="trialCooNum" jdbcType="INTEGER" />
    <result column="pass_coo_num" property="passCooNum" jdbcType="INTEGER" />
    <result column="trial_coo_audit_num" property="trialCooAuditNum" jdbcType="INTEGER" />
    <result column="pass_coo_audit_num" property="passCooAuditNum" jdbcType="INTEGER" />
    <result column="templet_type_desc" property="templetTypeDesc" jdbcType="VARCHAR" />
    <result column="mcht_grade_desc" property="mchtGradeDesc" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, source, type, mcht_id, entry_pic, pic, preheat_time, preheat_flag, preheat_seq_no, 
    enroll_begin_time, enroll_end_time, activity_begin_time, activity_end_time, description, 
    limit_mcht_num, benefit_point, min_member_group, push_mcht_type, mcht_id_group, product_type_group, 
    preferential_type, preferential_id_group, url_suffix, status, top_pic, templet_type, 
    templet_suffix, activity_group_id, is_sign, area_label, purchase_limits, purchase_limits_quantity, is_pre_sell,
    create_by, create_date, update_by, update_date, remarks, del_flag,
    (select s.staff_name from sys_staff_info s where s.staff_id=ba.create_by) create_staff_name,
    FUN_GET_STATUS_DESC("BU_ACTIVITY_AREA","SOURCE", ba.source) source_desc,
    FUN_GET_STATUS_DESC("BU_ACTIVITY_AREA","TYPE", ba.type) type_desc,
    FUN_GET_STATUS_DESC("BU_ACTIVITY_AREA","PUSH_MCHT_TYPE", ba.push_mcht_type) push_mcht_type_dese,
    FUN_GET_STATUS_DESC("BU_ACTIVITY_AREA","PREFERENTIAL_TYPE", ba.preferential_type) preferential_type_desc,
    FUN_GET_STATUS_DESC("BU_ACTIVITY_AREA","STATUS", ba.status) status_desc,
    (select bb.id from bu_activity bb where bb.activity_area_id=ba.id and bb.del_flag='0' limit 1) activity_id,
    (select cc.short_name from bu_activity bb, bu_mcht_info cc where bb.activity_area_id=ba.id and bb.del_flag='0' and bb.mcht_id=cc.id limit 1) short_name,
    (select cc.mcht_code from bu_activity bb, bu_mcht_info cc where bb.activity_area_id=ba.id and bb.del_flag='0' and bb.mcht_id=cc.id limit 1) mcht_code,
    (select cc.name from bu_activity bb, bu_product_brand cc where bb.activity_area_id=ba.id and bb.del_flag='0' and bb.product_brand_id=cc.id limit 1) brand_name,
    DateDiff(ba.preheat_time, NOW()) activity_days,
    (select bm.name from bu_member_group bm where bm.id=ba.min_member_group) min_member_group_name,
    (select count(bu.id) from bu_activity bu where bu.activity_area_id=ba.id and bu.status in ('5','6') and bu.del_flag='0') adopt_mch_num,
    (select count(bu.id) from bu_activity bu where bu.activity_area_id=ba.id and bu.del_flag='0') sign_up_num,
    (select count(bap.id) from bu_activity_product bap where bap.del_flag='0' and bap.refuse_flag='0' and bap.coo_audit_status='2' and bap.activity_id in (select bu.id from bu_activity bu where bu.activity_area_id=ba.id and bu.coo_audit_status='2' and bu.del_flag='0')) adopt_activity_product_num,
    (select count(bap.id) from bu_activity_product bap where bap.del_flag='0' and bap.activity_id in (select bu.id from bu_activity bu where bu.activity_area_id=ba.id and bu.del_flag='0')) sign_activity_product_num,
    (SELECT SUM(aa.quantity) FROM bu_order_dtl aa WHERE aa.activity_area_id=ba.id AND aa.product_status=1 and aa.del_flag='0') this_activity_area_num,
    (SELECT SUM(aa.sale_price*aa.quantity) FROM bu_order_dtl aa WHERE aa.activity_area_id=ba.id AND aa.product_status=1 and aa.del_flag='0') this_activity_area_sale_price,
    
    (select count(bu.id) from bu_activity bu where bu.activity_area_id = ba.id and bu.operate_audit_status != '2' and bu.operate_audit_status != '3' and bu.del_flag = '0') trial_operate_num,
    (select count(bu.id) from bu_activity bu where bu.activity_area_id = ba.id and bu.operate_audit_status = '2' and bu.del_flag = '0') pass_operate_num,
    (select count(bap.id) from bu_activity_product bap where bap.del_flag = '0' and bap.refuse_flag = '0' and bap.operate_audit_status != '2' and bap.operate_audit_status != '3' and bap.activity_id in (select bu.id from bu_activity bu where bu.activity_area_id = ba.id and bu.del_flag = '0')) trial_operate_audit_num,
    (select count(bap.id) from bu_activity_product bap where bap.del_flag = '0' and bap.refuse_flag = '0' and bap.operate_audit_status = '2' and bap.activity_id in (select bu.id from bu_activity bu where bu.activity_area_id = ba.id and bu.del_flag = '0')) pass_operate_audit_num,
    (select count(bu.id) from bu_activity bu where bu.activity_area_id = ba.id and bu.coo_audit_status != '2' and bu.coo_audit_status != '3' and bu.del_flag = '0') trial_coo_num,
    (select count(bu.id) from bu_activity bu where bu.activity_area_id = ba.id and bu.coo_audit_status = '2' and bu.del_flag = '0') pass_coo_num,
    (select count(bap.id) from bu_activity_product bap where bap.del_flag = '0' and bap.refuse_flag = '0' and bap.coo_audit_status != '2' and bap.coo_audit_status != '3' and bap.activity_id in (select bu.id from bu_activity bu where bu.activity_area_id = ba.id and bu.del_flag = '0')) trial_coo_audit_num,
    (select count(bap.id) from bu_activity_product bap where bap.del_flag = '0' and bap.refuse_flag = '0' and bap.coo_audit_status = '2' and bap.activity_id in (select bu.id from bu_activity bu where bu.activity_area_id = ba.id and bu.del_flag = '0')) pass_coo_audit_num,
    FUN_GET_STATUS_DESC("BU_ACTIVITY_AREA","TEMPLET_TYPE", ba.templet_type) templet_type_desc,
    FUN_GET_STATUS_DESC("BU_MCHT_INFO", "GRADE", (select mi.grade from bu_mcht_info mi where mi.del_flag = '0' and mi.id = ba.mcht_id)) mcht_grade_desc
  </sql>
  <select id="selectByCustomExample" resultMap="BaseResultMap" parameterType="com.jf.entity.ActivityAreaCustomExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bu_activity_area ba
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitSize}
    </if>
  </select>
    <select id="selectByCustomPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from bu_activity_area ba
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="countByCustomExample" parameterType="com.jf.entity.ActivityAreaCustomExample" resultType="java.lang.Integer" >
    select count(*) from bu_activity_area ba
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <select id="getTypeEqualToSixOrSeven" resultType="map" parameterType="Integer">
  	select 
  	ba.id as activityAreaId,
  	ba.name as activityAreaName
  	from bu_activity_area ba
  	where ba.type=#{type} and ba.activity_end_time > now() and ba.del_flag=0
  </select>
  <select id="updateActivityAreaPreheatSeqNo" parameterType="java.util.HashMap" resultType="java.lang.Integer">
	select FUN_UPDATE_ACTIVITY_AREA_PREHEAT_SEQ_NO(#{seqData},#{staffId}) from dual;
  </select>
  
  <update id="updateByExampleSelective" parameterType="map" >
    update bu_activity_area ba
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.source != null" >
        source = #{record.source,jdbcType=CHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=CHAR},
      </if>
      <if test="record.mchtId != null" >
        mcht_id = #{record.mchtId,jdbcType=INTEGER},
      </if>
      <if test="record.entryPic != null" >
        entry_pic = #{record.entryPic,jdbcType=VARCHAR},
      </if>
      <if test="record.pic != null" >
        pic = #{record.pic,jdbcType=VARCHAR},
      </if>
      <if test="record.preheatTime != null" >
        preheat_time = #{record.preheatTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.preheatFlag != null" >
        preheat_flag = #{record.preheatFlag,jdbcType=CHAR},
      </if>
      <if test="record.preheatSeqNo != null" >
        preheat_seq_no = #{record.preheatSeqNo,jdbcType=INTEGER},
      </if>
      <if test="record.enrollBeginTime != null" >
        enroll_begin_time = #{record.enrollBeginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.enrollEndTime != null" >
        enroll_end_time = #{record.enrollEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.activityBeginTime != null" >
        activity_begin_time = #{record.activityBeginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.activityEndTime != null" >
        activity_end_time = #{record.activityEndTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.description != null" >
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.limitMchtNum != null" >
        limit_mcht_num = #{record.limitMchtNum,jdbcType=INTEGER},
      </if>
      <if test="record.benefitPoint != null" >
        benefit_point = #{record.benefitPoint,jdbcType=VARCHAR},
      </if>
      <if test="record.minMemberGroup != null" >
        min_member_group = #{record.minMemberGroup,jdbcType=INTEGER},
      </if>
      <if test="record.pushMchtType != null" >
        push_mcht_type = #{record.pushMchtType,jdbcType=CHAR},
      </if>
      <if test="record.mchtIdGroup != null" >
        mcht_id_group = #{record.mchtIdGroup,jdbcType=VARCHAR},
      </if>
      <if test="record.productTypeGroup != null" >
        product_type_group = #{record.productTypeGroup,jdbcType=VARCHAR},
      </if>
      <if test="record.preferentialType != null" >
        preferential_type = #{record.preferentialType,jdbcType=CHAR},
      </if>
      <if test="record.preferentialIdGroup != null" >
        preferential_id_group = #{record.preferentialIdGroup,jdbcType=VARCHAR},
      </if>
      <if test="record.urlSuffix != null" >
        url_suffix = #{record.urlSuffix,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=CHAR},
      </if>
      <if test="record.topPic != null" >
        top_pic = #{record.topPic,jdbcType=VARCHAR},
      </if>
      <if test="record.templetType != null" >
        templet_type = #{record.templetType,jdbcType=CHAR},
      </if>
      <if test="record.templetSuffix != null" >
        templet_suffix = #{record.templetSuffix,jdbcType=VARCHAR},
      </if>
      <if test="record.activityGroupId != null" >
        activity_group_id = #{record.activityGroupId,jdbcType=INTEGER},
      </if>
      <if test="record.isSign != null" >
        is_sign = #{record.isSign,jdbcType=CHAR},
      </if>
      <if test="record.createBy != null" >
        create_by = #{record.createBy,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null" >
        update_by = #{record.updateBy,jdbcType=INTEGER},
      </if>
      <if test="record.updateDate != null" >
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remarks != null" >
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.delFlag != null" >
        del_flag = #{record.delFlag,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  
   
  <!-- 获取30天内已创建人  -->
  <select id="getCreateByList" resultType="java.util.Map" >
  		SELECT DISTINCT
		  ba.create_by,
		  (select ss.staff_name from sys_staff_info ss where ss.staff_id = ba.create_by ) create_staff_name
		from bu_activity_area ba
		WHERE ba.del_flag = '0'
			AND ba.create_by IS NOT NULL
		    AND ba.create_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)
  </select> 
   
  <select id="getEntryPics" parameterType="java.util.HashMap" resultType="java.lang.String">
	SELECT
		aa.entry_pic
	FROM
		bu_activity_area aa
	WHERE
	aa.del_flag = '0'
	AND aa.id IN
	<foreach collection="activityAreaIds" item="listItem" open="(" close=")" separator="," >
		#{listItem}
    </foreach> 
	ORDER BY FIND_IN_SET(aa.id,#{ids})  
  </select> 
  
  <select id="getProductIdsByActivityAreaIds" parameterType="java.lang.String" resultType="java.lang.Integer">
  	select DISTINCT ap.product_id from bu_activity_area aa,bu_activity a,bu_activity_product ap where aa.id = a.activity_area_id and a.id = ap.activity_id and FIND_IN_SET(aa.id,#{activityAreaIds}) and aa.del_flag='0' and a.del_flag='0' and ap.del_flag='0' and ap.refuse_flag='0' and ap.coo_audit_status='2'  
  </select>
  
  <select id="countActivityByMchtId" parameterType="java.lang.Integer" resultType="java.lang.Integer">
  	select count(1) from bu_activity_area baa, bu_activity ba where baa.del_flag = '0' and ba.del_flag = '0' and baa.id = ba.activity_area_id and (baa.source = '2' or baa.source = '1' and baa.type = '1') and baa.activity_end_time >= now() and ba.status != '4' and ba.mcht_id = #{mchtId} 
  </select>

  <update id="updateShareIntegralIsNull" parameterType="java.lang.Integer">
    update bu_activity_area set min_share_integral = null,max_share_integral = null where id = #{id}
  </update>
</mapper>

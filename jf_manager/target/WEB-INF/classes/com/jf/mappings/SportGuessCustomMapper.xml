<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jf.dao.SportGuessCustomMapper" >
  <resultMap id="BaseResultMap" type="com.jf.entity.SportGuessCustom" extends="com.jf.dao.SportGuessMapper.BaseResultMap" >
    <result column="guess_type_desc" property="guessTypeDesc" jdbcType="VARCHAR" />
    <result column="result_desc" property="resultDesc" jdbcType="VARCHAR" />
    <result column="create_staff_name" property="createStaffName" jdbcType="VARCHAR" />
    <result column="nick_name" property="nickName" jdbcType="VARCHAR" />
    <result column="member_account_id" property="memberAccountId" jdbcType="INTEGER" />
    <result column="member_integral" property="memberIntegral" jdbcType="INTEGER" />
    <result column="sport_sport_name" property="sportSportName" jdbcType="VARCHAR" />
    <result column="sport_home_team" property="sportHomeTeam" jdbcType="INTEGER" />
    <result column="sport_away_team" property="sportAwayTeam" jdbcType="INTEGER" />
    <result column="sport_home_rate" property="sportHomeRate" jdbcType="DECIMAL" />
    <result column="sport_aways_rate" property="sportAwaysRate" jdbcType="DECIMAL" />
    <result column="sport_draw_rate" property="sportDrawRate" jdbcType="DECIMAL" />
    <result column="sport_begin_time" property="sportBeginTime" jdbcType="TIMESTAMP" />
    <result column="sport_home_score" property="sportHomeScore" jdbcType="INTEGER" />
    <result column="sport_aways_score" property="sportAwaysScore" jdbcType="INTEGER" />
    <result column="sport_result" property="sportResult" jdbcType="VARCHAR" />
    <result column="sport_home_team_name" property="sportHomeTeamName" jdbcType="VARCHAR" />
    <result column="sport_away_team_name" property="sportAwayTeamName" jdbcType="VARCHAR" />
    <result column="sport_team_name" property="sportTeamName" jdbcType="VARCHAR" />
    <result column="sport_win_rate" property="sportWinRate" jdbcType="DECIMAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, member_id, guess_code, guess_type, sport_id, guess_win_team, integral, result, 
    rate, create_by, create_date, update_by, update_date, remarks, del_flag,
    FUN_GET_STATUS_DESC("BU_SPORT_GUESS", "GUESS_TYPE", t.guess_type) guess_type_desc,
    FUN_GET_STATUS_DESC("BU_SPORT_GUESS", "RESULT", t.result) result_desc,
    (select s.staff_name from sys_staff_info s where s.staff_id = t.create_by) create_staff_name,
    (select m.nick from bu_member_info m where m.del_flag = '0' and m.id = t.member_id) nick_name, <!-- 会员昵称 -->
    (select ma.id from bu_member_account ma where ma.del_flag = '0' and ma.member_id = t.member_id) member_account_id, <!-- 会员账户ID -->
    (select ma.integral from bu_member_account ma where ma.del_flag = '0' and ma.member_id = t.member_id) member_integral, <!-- 积分 -->
    (select s.sport_name from bu_sport s where s.del_flag = '0' and s.id = t.sport_id) sport_sport_name, <!-- 比赛名称 -->
    (select s.home_team from bu_sport s where s.del_flag = '0' and s.id = t.sport_id) sport_home_team, <!-- 主场队伍 -->
    (select s.away_team from bu_sport s where s.del_flag = '0' and s.id = t.sport_id) sport_away_team, <!-- 客场队伍 -->
    (select s.home_rate from bu_sport s where s.del_flag = '0' and s.id = t.sport_id) sport_home_rate, <!-- 主场比例 -->
    (select s.aways_rate from bu_sport s where s.del_flag = '0' and s.id = t.sport_id) sport_aways_rate, <!-- 客场比例 -->
    (select s.draw_rate from bu_sport s where s.del_flag = '0' and s.id = t.sport_id) sport_draw_rate, <!-- 平局比例 -->
    (select s.begin_time from bu_sport s where s.del_flag = '0' and s.id = t.sport_id) sport_begin_time, <!-- 比赛开始时间 -->
    (select s.home_score from bu_sport s where s.del_flag = '0' and s.id = t.sport_id) sport_home_score, <!-- 主场得分 -->
    (select s.aways_score from bu_sport s where s.del_flag = '0' and s.id = t.sport_id) sport_aways_score, <!-- 客场得分 -->
    (select s.result from bu_sport s where s.del_flag = '0' and s.id = t.sport_id) sport_result, <!-- 比赛结果 -->
    (select st.name from bu_sport s, bu_sport_team st where s.del_flag = '0' and st.del_flag = '0' and s.home_team = st.id and s.id = t.sport_id) sport_home_team_name, <!-- 主场队伍名称 -->
    (select st.name from bu_sport s, bu_sport_team st where s.del_flag = '0' and st.del_flag = '0' and s.away_team = st.id and s.id = t.sport_id) sport_away_team_name, <!-- 客场队伍名称 -->
    (select st.name from bu_sport_team st where st.del_flag = '0' and st.id = t.guess_win_team) sport_team_name, <!-- 竞猜获胜队伍名称 -->
    (select st.win_rate from bu_sport_team st where st.del_flag = '0' and st.id = t.guess_win_team) sport_win_rate <!-- 夺冠比例 -->
  </sql>
  <select id="selectByCustomExample" resultMap="BaseResultMap" parameterType="com.jf.entity.SportGuessCustomExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bu_sport_guess t
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitSize}
    </if>
  </select>
  <select id="selectByCustomPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from bu_sport_guess t
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="countByCustomExample" parameterType="com.jf.entity.SportGuessCustomExample" resultType="java.lang.Integer" >
    select count(*) from bu_sport_guess t
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByCustomExampleSelective" parameterType="map" >
    update bu_sport_guess t
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.memberId != null" >
        member_id = #{record.memberId,jdbcType=INTEGER},
      </if>
      <if test="record.guessCode != null" >
        guess_code = #{record.guessCode,jdbcType=VARCHAR},
      </if>
      <if test="record.guessType != null" >
        guess_type = #{record.guessType,jdbcType=CHAR},
      </if>
      <if test="record.sportId != null" >
        sport_id = #{record.sportId,jdbcType=INTEGER},
      </if>
      <if test="record.guessWinTeam != null" >
        guess_win_team = #{record.guessWinTeam,jdbcType=INTEGER},
      </if>
      <if test="record.integral != null" >
        integral = #{record.integral,jdbcType=INTEGER},
      </if>
      <if test="record.result != null" >
        result = #{record.result,jdbcType=CHAR},
      </if>
      <if test="record.createBy != null" >
        create_by = #{record.createBy,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null" >
        update_by = #{record.updateBy,jdbcType=INTEGER},
      </if>
      <if test="record.updateDate != null" >
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remarks != null" >
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.delFlag != null" >
        del_flag = #{record.delFlag,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
</mapper>
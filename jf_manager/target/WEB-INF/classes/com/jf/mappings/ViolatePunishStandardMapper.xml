<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jf.dao.ViolatePunishStandardMapper" >
  <resultMap id="BaseResultMap" type="com.jf.entity.ViolatePunishStandard" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="violate_type" property="violateType" jdbcType="CHAR" />
    <result column="violate_action" property="violateAction" jdbcType="VARCHAR" />
    <result column="content" property="content" jdbcType="VARCHAR" />
    <result column="punish_standard" property="punishStandard" jdbcType="VARCHAR" />
    <result column="punish_other" property="punishOther" jdbcType="VARCHAR" />
    <result column="complain_flag" property="complainFlag" jdbcType="CHAR" />
    <result column="enable_hours" property="enableHours" jdbcType="VARCHAR" />
    <result column="jifen_integral_desc" property="jifenIntegralDesc" jdbcType="VARCHAR" />
    <result column="jifen_integral" property="jifenIntegral" jdbcType="INTEGER" />
    <result column="seq_no" property="seqNo" jdbcType="INTEGER" />
    <result column="payment_breach_model" property="paymentBreachModel" jdbcType="CHAR" />
    <result column="breach_deduction_quota" property="breachDeductionQuota" jdbcType="DECIMAL" />
    <result column="min_deduction_quota" property="minDeductionQuota" jdbcType="DECIMAL" />
    <result column="integral_compensate_model" property="integralCompensateModel" jdbcType="CHAR" />
    <result column="integral_compensate_rate" property="integralCompensateRate" jdbcType="DECIMAL" />
    <result column="create_by" property="createBy" jdbcType="INTEGER" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_by" property="updateBy" jdbcType="INTEGER" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="remarks" property="remarks" jdbcType="VARCHAR" />
    <result column="del_flag" property="delFlag" jdbcType="CHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, violate_type, violate_action, content, punish_standard, punish_other, complain_flag, 
    enable_hours, jifen_integral_desc, jifen_integral, seq_no, payment_breach_model, 
    breach_deduction_quota, min_deduction_quota, integral_compensate_model, integral_compensate_rate, 
    create_by, create_date, update_by, update_date, remarks, del_flag
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.jf.entity.ViolatePunishStandardExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from bu_violate_punish_standard
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitSize}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from bu_violate_punish_standard
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from bu_violate_punish_standard
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.jf.entity.ViolatePunishStandardExample" >
    delete from bu_violate_punish_standard
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jf.entity.ViolatePunishStandard" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
       SELECT LAST_INSERT_ID()
    </selectKey>
    insert into bu_violate_punish_standard (violate_type, violate_action, content, 
      punish_standard, punish_other, complain_flag, 
      enable_hours, jifen_integral_desc, jifen_integral, 
      seq_no, payment_breach_model, breach_deduction_quota, 
      min_deduction_quota, integral_compensate_model, 
      integral_compensate_rate, create_by, create_date, 
      update_by, update_date, remarks, 
      del_flag)
    values (#{violateType,jdbcType=CHAR}, #{violateAction,jdbcType=VARCHAR}, #{content,jdbcType=VARCHAR}, 
      #{punishStandard,jdbcType=VARCHAR}, #{punishOther,jdbcType=VARCHAR}, #{complainFlag,jdbcType=CHAR}, 
      #{enableHours,jdbcType=VARCHAR}, #{jifenIntegralDesc,jdbcType=VARCHAR}, #{jifenIntegral,jdbcType=INTEGER}, 
      #{seqNo,jdbcType=INTEGER}, #{paymentBreachModel,jdbcType=CHAR}, #{breachDeductionQuota,jdbcType=DECIMAL}, 
      #{minDeductionQuota,jdbcType=DECIMAL}, #{integralCompensateModel,jdbcType=CHAR}, 
      #{integralCompensateRate,jdbcType=DECIMAL}, #{createBy,jdbcType=INTEGER}, #{createDate,jdbcType=TIMESTAMP}, 
      #{updateBy,jdbcType=INTEGER}, #{updateDate,jdbcType=TIMESTAMP}, #{remarks,jdbcType=VARCHAR}, 
      #{delFlag,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.jf.entity.ViolatePunishStandard" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
       SELECT LAST_INSERT_ID()
    </selectKey>
    insert into bu_violate_punish_standard
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="violateType != null" >
        violate_type,
      </if>
      <if test="violateAction != null" >
        violate_action,
      </if>
      <if test="content != null" >
        content,
      </if>
      <if test="punishStandard != null" >
        punish_standard,
      </if>
      <if test="punishOther != null" >
        punish_other,
      </if>
      <if test="complainFlag != null" >
        complain_flag,
      </if>
      <if test="enableHours != null" >
        enable_hours,
      </if>
      <if test="jifenIntegralDesc != null" >
        jifen_integral_desc,
      </if>
      <if test="jifenIntegral != null" >
        jifen_integral,
      </if>
      <if test="seqNo != null" >
        seq_no,
      </if>
      <if test="paymentBreachModel != null" >
        payment_breach_model,
      </if>
      <if test="breachDeductionQuota != null" >
        breach_deduction_quota,
      </if>
      <if test="minDeductionQuota != null" >
        min_deduction_quota,
      </if>
      <if test="integralCompensateModel != null" >
        integral_compensate_model,
      </if>
      <if test="integralCompensateRate != null" >
        integral_compensate_rate,
      </if>
      <if test="createBy != null" >
        create_by,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="updateBy != null" >
        update_by,
      </if>
      <if test="updateDate != null" >
        update_date,
      </if>
      <if test="remarks != null" >
        remarks,
      </if>
      <if test="delFlag != null" >
        del_flag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="violateType != null" >
        #{violateType,jdbcType=CHAR},
      </if>
      <if test="violateAction != null" >
        #{violateAction,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="punishStandard != null" >
        #{punishStandard,jdbcType=VARCHAR},
      </if>
      <if test="punishOther != null" >
        #{punishOther,jdbcType=VARCHAR},
      </if>
      <if test="complainFlag != null" >
        #{complainFlag,jdbcType=CHAR},
      </if>
      <if test="enableHours != null" >
        #{enableHours,jdbcType=VARCHAR},
      </if>
      <if test="jifenIntegralDesc != null" >
        #{jifenIntegralDesc,jdbcType=VARCHAR},
      </if>
      <if test="jifenIntegral != null" >
        #{jifenIntegral,jdbcType=INTEGER},
      </if>
      <if test="seqNo != null" >
        #{seqNo,jdbcType=INTEGER},
      </if>
      <if test="paymentBreachModel != null" >
        #{paymentBreachModel,jdbcType=CHAR},
      </if>
      <if test="breachDeductionQuota != null" >
        #{breachDeductionQuota,jdbcType=DECIMAL},
      </if>
      <if test="minDeductionQuota != null" >
        #{minDeductionQuota,jdbcType=DECIMAL},
      </if>
      <if test="integralCompensateModel != null" >
        #{integralCompensateModel,jdbcType=CHAR},
      </if>
      <if test="integralCompensateRate != null" >
        #{integralCompensateRate,jdbcType=DECIMAL},
      </if>
      <if test="createBy != null" >
        #{createBy,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null" >
        #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="remarks != null" >
        #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null" >
        #{delFlag,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jf.entity.ViolatePunishStandardExample" resultType="java.lang.Integer" >
    select count(*) from bu_violate_punish_standard
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update bu_violate_punish_standard
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.violateType != null" >
        violate_type = #{record.violateType,jdbcType=CHAR},
      </if>
      <if test="record.violateAction != null" >
        violate_action = #{record.violateAction,jdbcType=VARCHAR},
      </if>
      <if test="record.content != null" >
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.punishStandard != null" >
        punish_standard = #{record.punishStandard,jdbcType=VARCHAR},
      </if>
      <if test="record.punishOther != null" >
        punish_other = #{record.punishOther,jdbcType=VARCHAR},
      </if>
      <if test="record.complainFlag != null" >
        complain_flag = #{record.complainFlag,jdbcType=CHAR},
      </if>
      <if test="record.enableHours != null" >
        enable_hours = #{record.enableHours,jdbcType=VARCHAR},
      </if>
      <if test="record.jifenIntegralDesc != null" >
        jifen_integral_desc = #{record.jifenIntegralDesc,jdbcType=VARCHAR},
      </if>
      <if test="record.jifenIntegral != null" >
        jifen_integral = #{record.jifenIntegral,jdbcType=INTEGER},
      </if>
      <if test="record.seqNo != null" >
        seq_no = #{record.seqNo,jdbcType=INTEGER},
      </if>
      <if test="record.paymentBreachModel != null" >
        payment_breach_model = #{record.paymentBreachModel,jdbcType=CHAR},
      </if>
      <if test="record.breachDeductionQuota != null" >
        breach_deduction_quota = #{record.breachDeductionQuota,jdbcType=DECIMAL},
      </if>
      <if test="record.minDeductionQuota != null" >
        min_deduction_quota = #{record.minDeductionQuota,jdbcType=DECIMAL},
      </if>
      <if test="record.integralCompensateModel != null" >
        integral_compensate_model = #{record.integralCompensateModel,jdbcType=CHAR},
      </if>
      <if test="record.integralCompensateRate != null" >
        integral_compensate_rate = #{record.integralCompensateRate,jdbcType=DECIMAL},
      </if>
      <if test="record.createBy != null" >
        create_by = #{record.createBy,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateBy != null" >
        update_by = #{record.updateBy,jdbcType=INTEGER},
      </if>
      <if test="record.updateDate != null" >
        update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.remarks != null" >
        remarks = #{record.remarks,jdbcType=VARCHAR},
      </if>
      <if test="record.delFlag != null" >
        del_flag = #{record.delFlag,jdbcType=CHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update bu_violate_punish_standard
    set id = #{record.id,jdbcType=INTEGER},
      violate_type = #{record.violateType,jdbcType=CHAR},
      violate_action = #{record.violateAction,jdbcType=VARCHAR},
      content = #{record.content,jdbcType=VARCHAR},
      punish_standard = #{record.punishStandard,jdbcType=VARCHAR},
      punish_other = #{record.punishOther,jdbcType=VARCHAR},
      complain_flag = #{record.complainFlag,jdbcType=CHAR},
      enable_hours = #{record.enableHours,jdbcType=VARCHAR},
      jifen_integral_desc = #{record.jifenIntegralDesc,jdbcType=VARCHAR},
      jifen_integral = #{record.jifenIntegral,jdbcType=INTEGER},
      seq_no = #{record.seqNo,jdbcType=INTEGER},
      payment_breach_model = #{record.paymentBreachModel,jdbcType=CHAR},
      breach_deduction_quota = #{record.breachDeductionQuota,jdbcType=DECIMAL},
      min_deduction_quota = #{record.minDeductionQuota,jdbcType=DECIMAL},
      integral_compensate_model = #{record.integralCompensateModel,jdbcType=CHAR},
      integral_compensate_rate = #{record.integralCompensateRate,jdbcType=DECIMAL},
      create_by = #{record.createBy,jdbcType=INTEGER},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      update_by = #{record.updateBy,jdbcType=INTEGER},
      update_date = #{record.updateDate,jdbcType=TIMESTAMP},
      remarks = #{record.remarks,jdbcType=VARCHAR},
      del_flag = #{record.delFlag,jdbcType=CHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jf.entity.ViolatePunishStandard" >
    update bu_violate_punish_standard
    <set >
      <if test="violateType != null" >
        violate_type = #{violateType,jdbcType=CHAR},
      </if>
      <if test="violateAction != null" >
        violate_action = #{violateAction,jdbcType=VARCHAR},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="punishStandard != null" >
        punish_standard = #{punishStandard,jdbcType=VARCHAR},
      </if>
      <if test="punishOther != null" >
        punish_other = #{punishOther,jdbcType=VARCHAR},
      </if>
      <if test="complainFlag != null" >
        complain_flag = #{complainFlag,jdbcType=CHAR},
      </if>
      <if test="enableHours != null" >
        enable_hours = #{enableHours,jdbcType=VARCHAR},
      </if>
      <if test="jifenIntegralDesc != null" >
        jifen_integral_desc = #{jifenIntegralDesc,jdbcType=VARCHAR},
      </if>
      <if test="jifenIntegral != null" >
        jifen_integral = #{jifenIntegral,jdbcType=INTEGER},
      </if>
      <if test="seqNo != null" >
        seq_no = #{seqNo,jdbcType=INTEGER},
      </if>
      <if test="paymentBreachModel != null" >
        payment_breach_model = #{paymentBreachModel,jdbcType=CHAR},
      </if>
      <if test="breachDeductionQuota != null" >
        breach_deduction_quota = #{breachDeductionQuota,jdbcType=DECIMAL},
      </if>
      <if test="minDeductionQuota != null" >
        min_deduction_quota = #{minDeductionQuota,jdbcType=DECIMAL},
      </if>
      <if test="integralCompensateModel != null" >
        integral_compensate_model = #{integralCompensateModel,jdbcType=CHAR},
      </if>
      <if test="integralCompensateRate != null" >
        integral_compensate_rate = #{integralCompensateRate,jdbcType=DECIMAL},
      </if>
      <if test="createBy != null" >
        create_by = #{createBy,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateBy != null" >
        update_by = #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="updateDate != null" >
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="remarks != null" >
        remarks = #{remarks,jdbcType=VARCHAR},
      </if>
      <if test="delFlag != null" >
        del_flag = #{delFlag,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jf.entity.ViolatePunishStandard" >
    update bu_violate_punish_standard
    set violate_type = #{violateType,jdbcType=CHAR},
      violate_action = #{violateAction,jdbcType=VARCHAR},
      content = #{content,jdbcType=VARCHAR},
      punish_standard = #{punishStandard,jdbcType=VARCHAR},
      punish_other = #{punishOther,jdbcType=VARCHAR},
      complain_flag = #{complainFlag,jdbcType=CHAR},
      enable_hours = #{enableHours,jdbcType=VARCHAR},
      jifen_integral_desc = #{jifenIntegralDesc,jdbcType=VARCHAR},
      jifen_integral = #{jifenIntegral,jdbcType=INTEGER},
      seq_no = #{seqNo,jdbcType=INTEGER},
      payment_breach_model = #{paymentBreachModel,jdbcType=CHAR},
      breach_deduction_quota = #{breachDeductionQuota,jdbcType=DECIMAL},
      min_deduction_quota = #{minDeductionQuota,jdbcType=DECIMAL},
      integral_compensate_model = #{integralCompensateModel,jdbcType=CHAR},
      integral_compensate_rate = #{integralCompensateRate,jdbcType=DECIMAL},
      create_by = #{createBy,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_by = #{updateBy,jdbcType=INTEGER},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      remarks = #{remarks,jdbcType=VARCHAR},
      del_flag = #{delFlag,jdbcType=CHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>
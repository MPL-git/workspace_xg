<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.jf.dao.ProductItemCustomMapper" >
  <resultMap id="BaseResultMap" type="com.jf.entity.ProductItemCustom"  extends="com.jf.dao.ProductItemMapper.BaseResultMap">
    <result column="artNo" property="artNo" jdbcType="VARCHAR" />
    <result column="productName" property="productName" jdbcType="VARCHAR" />
    <result column="brandName" property="brandName" jdbcType="VARCHAR" />
     <result column="feeRate" property="feeRate" jdbcType="DECIMAL" />
     <result column="brandId" property="brandId" jdbcType="INTEGER" />
  </resultMap>
  
  <select id="getProductInfoByItemId" parameterType="java.lang.Integer" resultType="com.jf.entity.ProductItemCustom">
  		select
		item.product_id,
		item.pic,
		item.sku,
		item.prop_val_id,
		item.cost_price,
		item.stock,
		item.locked_amount,
		item.sale_price,
		item.mall_price,
		pro.art_no as artNo,
		pro.name as productName,
		brand.name as brandName
		from bu_product_item item
		left join bu_product pro on pro.id = item.product_id
		left join bu_product_brand brand on brand.id = pro.brand_id
		where item.id = #{productItemId}
		and item.del_flag = '0'
		and pro.del_flag = '0'
		and brand.del_flag = '0'
  	</select>

	<update id="deductSkuLockedAmount" parameterType="java.util.Map">
		UPDATE bu_product_item item
		SET item.locked_amount = (item.locked_amount - #{quantity})
		WHERE
		item.id = #{productItemId}
	</update>

  	<select id="getProductInfoByActivityId" parameterType="java.util.Map" resultType="com.jf.entity.ProductItemCustom">
  		select
		item.product_id,
		item.pic,
		item.sku,
		item.prop_val_id,
		item.cost_price,
		item.tag_price,
		item.sale_price,
		item.mall_price,
		pro.art_no as artNo,
		pro.name as productName,
		pro.brand_id as brandId,
		pro.product_type1_id,
		pro.product_type2_id,
		pro.product_type_id,
		brand.name as brandName,
		(select ac.fee_rate from bu_activity ac where ac.id = #{activityId}) as feeRate
		from bu_product_item item
		left join bu_product pro on pro.id = item.product_id
		left join bu_product_brand brand on brand.id = pro.brand_id
		where item.id = #{productItemId}
		and item.del_flag = '0'
		and pro.del_flag = '0'
		and brand.del_flag = '0'
  	</select>
  	
  	<select id="findIdByForUpdate" parameterType="java.lang.Integer" resultType="com.jf.entity.ProductItem">
  		select * from bu_product_item item
		where item.id = #{productItemId}
		for update
  	</select>
  	
  	<update id="updateSkuLockedAmount" parameterType="java.util.Map">
  		UPDATE bu_product_item item
		SET item.locked_amount = (item.locked_amount + #{quantity})
		WHERE
			item.id = #{productItemId} 
		AND item.stock - #{quantity} >=
		<choose>
			<when test="cloudProductItemId != null and cloudProductItemId != ''">
			(
			SELECT
				T.cloudLockedAmount
			FROM
				(
					SELECT
						sum(locked_amount) AS cloudLockedAmount
					FROM
						bu_product_item
					WHERE
						cloud_product_item_id = #{cloudProductItemId}
					AND del_flag = '0'
				) T
			)
			</when>
			<otherwise>
				item.locked_amount
			</otherwise>
		</choose>
  	</update>
  	
  	<select id="getSpecPic" parameterType="java.util.Map" resultType="com.jf.entity.ProductItem">
  		select
		item.pic
		from bu_product_item item
		where item.product_id = #{productId}
		and FIND_IN_SET(#{propValId},item.prop_val_id)
		and item.del_flag = '0'
		limit 1
  	</select>
  	
  	<select id="getProductItemPropDesc" parameterType="java.util.Map" resultType="String">
  		select FUN_GET_PRODUCT_ITEM_PROP_DESC(#{productItemId},#{mark}) from dual
  	</select>
  	
  	<select id="getSkuByProductId" parameterType="int" resultType="com.jf.entity.ProductItem">
  		select
		item.id,
		item.sale_price,
		item.mall_price,
		item.tag_price
		from bu_product_item item
		where item.product_id = #{productId}
		and (item.stock - item.locked_amount) > 0
		and item.del_flag = '0'
		order by item.sale_price,item.tag_price desc,id desc
  	</select>

	<select id="findSkuByProductId" parameterType="int" resultType="com.jf.entity.ProductItem">
  		select
		item.id,
		item.sale_price,
		item.mall_price,
		item.tag_price
		from bu_product_item item
		where item.product_id = #{productId}
		and item.del_flag = '0'
		order by item.sale_price,item.tag_price desc,id desc
  	</select>

  	<!-- 获取库存 -->
  	<select id="getProductStockInfo" parameterType="map" resultType="com.jf.entity.ProductItem">
  		select
  		item.id,
  		ifnull(sum(item.stock),0) as stock,
  		ifnull(sum(item.locked_amount),0) as lockedAmount
		from bu_product_item item
		where item.del_flag = '0'
		<choose>
			<when test="productId != null and productId != ''">
				and item.product_id = #{productId}
			</when>
			<when test="cloudProductItemId != null and cloudProductItemId != ''">
				and item.cloud_product_item_id = #{cloudProductItemId}
			</when>
			<otherwise>
				and 1 = 2
			</otherwise>
		</choose>
  	</select>
  	
  	<!-- 获取供应商经销代码 -->
  	<select id="getCloudSellingPrice" parameterType="int" resultType="com.jf.entity.ProductItemCustom">
  		SELECT
			cp.selling_price
		FROM
			jybao.bu_cloud_product cp
		WHERE
			cp.id IN (
				SELECT
					item.cloud_product_id
				FROM
					jybao.bu_cloud_product_item item
				WHERE
					item.id = #{cloudProductItemId}
			)
  	</select>

	<update id="decreaseStock">
		UPDATE bu_product_item
		SET stock = stock - #{decrement}
		WHERE id = #{productItemId} AND stock - #{decrement} >= locked_amount and del_flag = '0'
	</update>

	<select id="getProductStock" resultType="java.lang.Integer">
		select ifnull(sum(stock-locked_amount),0)
		from bu_product_item
		where product_id = #{productId} and del_flag = '0' and stock >= locked_amount
	</select>
</mapper>